{"version":3,"sources":["pages/CitiesPage.module.css","components/Table.module.css","components/Table.tsx","pages/CitiesPage.tsx","pages/ErrorPage.tsx","models/city.ts","pages/IndexPage.tsx","App.tsx","index.tsx"],"names":["module","exports","screenSize","Math","max","window","screen","width","height","Table","className","headerHeight","rowHeight","header","rows","getRowKey","renderRow","useState","scrollTop","setScrollTop","firstVisibleRow","min","length","floor","rowsToRender","ceil","tableHeight","rowNodes","i","row","push","color","String","styles","tableRow","style","top","table","onScroll","e","target","inputProps","variant","size","input","collator","Intl","Collator","comparators","name","a","b","compare","distance","population","populationFormatter","NumberFormat","getDistance","lat1","lng1","lat2","lng2","lat1Rad","PI","lat2Rad","deltaLat","deltaLng","sin","cos","atan2","sqrt","CitiesPage","citiesProp","cities","provinces","cityNameFilter","setCityNameFilter","provinceFilter","setProvinceFilter","location","setLocation","useMemo","map","city","latLng","column","direction","sortMode","setSortMode","provincesById","forEach","province","id","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","undefined","enableHighAccuracy","timeout","maximumAge","columns","title","comparator","renderCell","TextField","value","onChange","event","toLowerCase","InputProps","startAdornment","InputAdornment","Search","provinceId","select","Number","MenuItem","align","format","toFixed","rowsWithProvinceFilter","filter","rowsWithCityNameFilter","includes","comparatorName","sorderRows","sort","Container","container","Paper","paper","Typography","tableContainer","TableHead","component","tableHead","TableCell","tableHeadCell","TableSortLabel","active","onClick","justifyContent","tableCell","ErrorPage","error","Box","py","message","fetchCities","fetch","then","response","ok","Error","statusText","json","denormalizedCities","nextProvinceId","provincesByName","lat","lng","admin_name","IndexPage","setCities","setProvinces","setError","catch","App","StylesProvider","injectFirst","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7a9e484.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CitiesPage_container__1_j_j\",\"paper\":\"CitiesPage_paper__GloCE\",\"tableContainer\":\"CitiesPage_tableContainer__BQUe_\",\"table\":\"CitiesPage_table__HYwZN\",\"tableHead\":\"CitiesPage_tableHead__2IEXS\",\"tableHeadCell\":\"CitiesPage_tableHeadCell__29HyA\",\"tableCell\":\"CitiesPage_tableCell__mR7D9\",\"header\":\"CitiesPage_header__3yerV\",\"input\":\"CitiesPage_input__1u7xX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\",\"tableRow\":\"Table_tableRow__325nM\"};","import { ReactNode, useState } from 'react';\nimport styles from './Table.module.css';\n\nconst screenSize = Math.max(window.screen.width, window.screen.height);\n\nexport const Table = <Row,>({\n  className,\n  headerHeight,\n  rowHeight,\n  header,\n  rows,\n  getRowKey,\n  renderRow,\n}: {\n  className?: string;\n  headerHeight: number;\n  rowHeight: number;\n  header: ReactNode;\n  rows: Row[];\n  getRowKey: (row: Row) => string | number;\n  renderRow: (row: Row) => ReactNode;\n}) => {\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const firstVisibleRow = Math.min(\n    rows.length,\n    Math.max(0, Math.floor(scrollTop / rowHeight)),\n  );\n\n  const rowsToRender = Math.ceil(screenSize / rowHeight);\n  const tableHeight = rowHeight * rows.length;\n\n  const rowNodes: ReactNode[] = [];\n\n  for (\n    let i = firstVisibleRow;\n    i < Math.min(firstVisibleRow + rowsToRender, rows.length);\n    i++\n  ) {\n    const row = rows[i];\n\n    rowNodes.push(\n      <div\n        color={String(i)}\n        key={getRowKey(row)}\n        className={styles.tableRow}\n        style={{ top: rowHeight * i + headerHeight, height: rowHeight }}\n      >\n        {renderRow(row)}\n      </div>,\n    );\n  }\n\n  return (\n    <div\n      className={`${styles.table} ${className || ''}`}\n      onScroll={(e) => setScrollTop((e.target as HTMLDivElement).scrollTop)}\n    >\n      {header}\n      <div style={{ height: tableHeight }}>{rowNodes}</div>\n    </div>\n  );\n};\n","import {\n  Container,\n  InputAdornment,\n  MenuItem,\n  Paper,\n  TableCell,\n  TableHead,\n  TableSortLabel,\n  TextField,\n  TextFieldProps,\n  Typography,\n} from '@material-ui/core';\nimport { Search } from '@material-ui/icons';\nimport { Table } from 'components';\nimport { City, Province } from 'models';\nimport { FC, ReactNode, useEffect, useMemo, useState } from 'react';\nimport styles from './CitiesPage.module.css';\n\ntype SortComparatorName = 'name' | 'distance' | 'population';\n\ntype SortDirection = 'asc' | 'desc';\n\ninterface Column {\n  title: string;\n  renderCell: (city: City) => ReactNode;\n  align?: 'left' | 'right';\n  width: string;\n  comparator?: SortComparatorName;\n  input?: ReactNode;\n}\n\nconst inputProps: TextFieldProps = {\n  variant: 'outlined',\n  size: 'small',\n  className: styles.input,\n};\n\nconst collator = new Intl.Collator('en');\n\nconst comparators: Record<SortComparatorName, (a: City, b: City) => number> = {\n  name: (a, b) => collator.compare(a.name, b.name),\n  distance: (a, b) => a.distance - b.distance,\n  population: (a, b) => (a.population || 0) - (b.population || 0),\n};\n\nconst populationFormatter = new Intl.NumberFormat('en');\n\n// Source: https://www.movable-type.co.uk/scripts/latlong.html\nconst getDistance = (\n  [lat1, lng1]: [number, number],\n  [lat2, lng2]: [number, number],\n): number => {\n  const lat1Rad = (lat1 * Math.PI) / 180;\n  const lat2Rad = (lat2 * Math.PI) / 180;\n\n  const deltaLat = ((lat2 - lat1) * Math.PI) / 180;\n  const deltaLng = ((lng2 - lng1) * Math.PI) / 180;\n\n  const a =\n    Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +\n    Math.cos(lat1Rad) *\n      Math.cos(lat2Rad) *\n      Math.sin(deltaLng / 2) *\n      Math.sin(deltaLng / 2);\n\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  return c * 6371;\n};\n\nexport const CitiesPage: FC<{ cities: City[]; provinces: Province[] }> = ({\n  cities: citiesProp,\n  provinces,\n}) => {\n  const [cityNameFilter, setCityNameFilter] = useState('');\n  const [provinceFilter, setProvinceFilter] = useState(0);\n  const [location, setLocation] = useState<[number, number] | null>(null);\n\n  const cities = useMemo(\n    () =>\n      location\n        ? citiesProp.map((city) => ({\n            ...city,\n            distance: getDistance(location, city.latLng),\n          }))\n        : citiesProp,\n    [citiesProp, location],\n  );\n\n  const [sortMode, setSortMode] = useState<{\n    column: number;\n    direction: SortDirection;\n  }>({ column: 0, direction: 'asc' });\n\n  const provincesById: Record<number, Province> = useMemo(() => {\n    const provincesById: Record<number, Province> = {};\n\n    provinces.forEach((province) => {\n      provincesById[province.id] = province;\n    });\n\n    return provincesById;\n  }, [provinces]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (position) =>\n        setLocation([position.coords.latitude, position.coords.longitude]),\n      undefined,\n      {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0,\n      },\n    );\n  }, []);\n\n  const columns: Column[] = [\n    {\n      title: 'Name',\n      width: '30%',\n      comparator: 'name',\n      renderCell: (city) => city.name,\n      input: (\n        <TextField\n          {...inputProps}\n          value={cityNameFilter}\n          onChange={(event) =>\n            setCityNameFilter(event.target.value.toLowerCase())\n          }\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\" color={'red'}>\n                <Search />\n              </InputAdornment>\n            ),\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Province',\n      width: '30%',\n      renderCell: (city) =>\n        city.provinceId ? provincesById[city.provinceId].name : null,\n      input: (\n        <TextField\n          {...inputProps}\n          value={provinceFilter}\n          select\n          onChange={(event) => setProvinceFilter(Number(event.target.value))}\n        >\n          <MenuItem value={0}>All</MenuItem>\n          {provinces.map((province) => (\n            <MenuItem key={province.id} value={province.id}>\n              {province.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      ),\n    },\n    {\n      title: 'Population',\n      width: '20%',\n      align: 'right',\n      comparator: 'population',\n      renderCell: (city) =>\n        city.population === null\n          ? null\n          : populationFormatter.format(city.population),\n    },\n    {\n      title: location ? 'Distance' : 'Coordinates',\n      width: '20%',\n      align: 'right',\n      comparator: location ? 'distance' : undefined,\n      renderCell: (city) =>\n        location\n          ? `${Math.floor(city.distance)} km`\n          : `${city.latLng[0].toFixed(3)}, ${city.latLng[1].toFixed(3)}`,\n    },\n  ];\n\n  const rowsWithProvinceFilter = useMemo(\n    () =>\n      provinceFilter\n        ? cities.filter((city) => city.provinceId === provinceFilter)\n        : cities,\n    [cities, provinceFilter],\n  );\n\n  const rowsWithCityNameFilter = useMemo(\n    () =>\n      cityNameFilter\n        ? rowsWithProvinceFilter.filter((city) =>\n            city.name.toLowerCase().includes(cityNameFilter),\n          )\n        : rowsWithProvinceFilter,\n    [rowsWithProvinceFilter, cityNameFilter],\n  );\n\n  const comparatorName = columns[sortMode.column].comparator;\n\n  const sorderRows = useMemo(() => {\n    if (!comparatorName) return rowsWithCityNameFilter;\n\n    const rows = [...rowsWithCityNameFilter];\n    const direction = sortMode.direction === 'asc' ? 1 : -1;\n\n    rows.sort((a, b) => comparators[comparatorName](a, b) * direction);\n\n    return rows;\n  }, [rowsWithCityNameFilter, comparatorName, sortMode]);\n\n  return (\n    <Container className={styles.container}>\n      <Paper className={styles.paper}>\n        <div className={styles.header}>\n          <Typography variant=\"h5\">🇳🇱 Netherlands Cities</Typography>\n        </div>\n        <div className={styles.tableContainer}>\n          <Table\n            className={styles.table}\n            headerHeight={105}\n            rowHeight={50}\n            header={\n              <TableHead component=\"div\" className={styles.tableHead}>\n                {columns.map(\n                  ({ title, input, align, width, comparator }, i) => (\n                    <TableCell\n                      key={title}\n                      component=\"div\"\n                      className={styles.tableHeadCell}\n                      align={align}\n                      style={{ width }}\n                    >\n                      {comparator ? (\n                        <TableSortLabel\n                          active={sortMode.column === i}\n                          direction={\n                            sortMode.column === i ? sortMode.direction : 'asc'\n                          }\n                          onClick={() => {\n                            setSortMode({\n                              column: i,\n                              direction:\n                                sortMode.column === i &&\n                                sortMode.direction === 'asc'\n                                  ? 'desc'\n                                  : 'asc',\n                            });\n                          }}\n                        >\n                          {title}\n                        </TableSortLabel>\n                      ) : (\n                        title\n                      )}\n\n                      {input}\n                    </TableCell>\n                  ),\n                )}\n              </TableHead>\n            }\n            rows={sorderRows}\n            getRowKey={(city) => city.id}\n            renderRow={(city) => (\n              <>\n                {columns.map(({ title, renderCell, align, width }) => (\n                  <div\n                    key={title}\n                    style={{\n                      width,\n                      justifyContent:\n                        align === 'right' ? 'flex-end' : undefined,\n                    }}\n                    className={styles.tableCell}\n                  >\n                    {renderCell(city)}\n                  </div>\n                ))}\n              </>\n            )}\n          />\n        </div>\n      </Paper>\n    </Container>\n  );\n};\n","import { Box, Container, Typography } from '@material-ui/core';\nimport { FC } from 'react';\n\nexport const ErrorPage: FC<{ error: Error }> = ({ error }) => (\n  <Container>\n    <Box py={2}>\n      <Typography>Error: {error.message}</Typography>\n    </Box>\n  </Container>\n);\n","interface DenormalizedCity {\n  city: string;\n  lat: string;\n  lng: string;\n  admin_name: string;\n  population: string;\n}\n\nexport interface Province {\n  id: number;\n  name: string;\n}\n\nexport interface City {\n  id: number;\n  name: string;\n  provinceId: number | null;\n  population: number | null;\n  latLng: [number, number];\n  distance: number;\n}\n\nconst collator = new Intl.Collator('en');\n\nconst normalizeCities = (\n  denormalizedCities: DenormalizedCity[],\n): { cities: City[]; provinces: Province[] } => {\n  let nextProvinceId = 1;\n\n  const cities: City[] = [];\n  const provinces: Province[] = [];\n  const provincesByName: Record<string, number | undefined> = {};\n\n  denormalizedCities.forEach(\n    ({ city, lat, lng, admin_name, population }, i) => {\n      if (admin_name && !provincesByName[admin_name]) {\n        provincesByName[admin_name] = nextProvinceId;\n\n        provinces.push({\n          id: nextProvinceId,\n          name: admin_name,\n        });\n\n        nextProvinceId += 1;\n      }\n\n      cities.push({\n        id: i + 1,\n        name: city,\n        provinceId: admin_name ? provincesByName[admin_name] || null : null,\n        population: population ? Number(population) : null,\n        latLng: [Number(lat), Number(lng)],\n        distance: -1,\n      });\n    },\n  );\n\n  provinces.sort((a, b) => collator.compare(a.name, b.name));\n\n  return { cities, provinces };\n};\n\nexport const fetchCities = fetch('/data.json')\n  .then((response) => {\n    if (!response.ok) throw new Error(response.statusText);\n\n    return response.json() as Promise<DenormalizedCity[]>;\n  })\n  .then(normalizeCities);\n","import { City, fetchCities, Province } from 'models';\nimport { FC, useEffect, useState } from 'react';\nimport { CitiesPage } from './CitiesPage';\nimport { ErrorPage } from './ErrorPage';\n\nexport const IndexPage: FC = () => {\n  const [cities, setCities] = useState<City[] | null>(null);\n  const [provinces, setProvinces] = useState<Province[] | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    fetchCities\n      .then(({ cities, provinces }) => {\n        setCities(cities);\n        setProvinces(provinces);\n      })\n      .catch(setError);\n  }, []);\n\n  if (error) return <ErrorPage error={error} />;\n\n  if (cities && provinces)\n    return <CitiesPage cities={cities} provinces={provinces} />;\n\n  return null;\n};\n","import { StylesProvider } from '@material-ui/core';\nimport { IndexPage } from 'pages';\nimport { FC } from 'react';\n\nexport const App: FC = () => (\n  <StylesProvider injectFirst>\n    <IndexPage />\n  </StylesProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}